import requests
import logging
from flask import Flask, request, jsonify
from bs4 import BeautifulSoup
import json
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Logging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API Key ‡∏à‡∏≤‡∏Å Environment Variables
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
SHOPEE_AFFILIATE_ID = os.getenv("SHOPEE_AFFILIATE_ID", "9A9ZBqQZk5")
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN", "")
LINE_REPLY_URL = "https://api.line.me/v2/bot/message/reply"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Keys ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not OPENAI_API_KEY:
    logging.error("‚ö†Ô∏è OPENAI_API_KEY is missing. Please set it in environment variables.")
    exit(1)
if not LINE_CHANNEL_ACCESS_TOKEN:
    logging.error("‚ö†Ô∏è LINE_CHANNEL_ACCESS_TOKEN is missing. Please set it in environment variables.")
    exit(1)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Shopee
def scrape_shopee(keyword):
    url = f"https://shopee.co.th/search?keyword={keyword}"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(url, headers=headers)
    
    if response.status_code != 200:
        logging.error(f"‚ö†Ô∏è Failed to fetch data from Shopee. Status code: {response.status_code}")
        return []
    
    soup = BeautifulSoup(response.text, "html.parser")
    products = []
    
    for product in soup.find_all("div", class_="shopee-search-item-result__item")[:5]:
        try:
            name = product.find("div", class_="_10Wbs-")
            price = product.find("span", class_="_29R_un")
            if name and price:
                products.append({
                    "name": name.text,
                    "price": price.text,
                    "link": f"https://shope.ee/{SHOPEE_AFFILIATE_ID}"
                })
        except AttributeError:
            continue
    
    return products

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ä‡πâ OpenAI ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
def chat_with_ai(user_message):
    try:
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"},
            json={
                "model": "gpt-4",
                "messages": [
                    {"role": "system", "content": "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ä‡∏ó‡∏ö‡∏≠‡∏ó‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏π‡∏Å"},
                    {"role": "user", "content": user_message}
                ]
            }
        )

        response_data = response.json()
        return response_data.get("choices", [{}])[0].get("message", {}).get("content", "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏â‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è Error occurred while communicating with OpenAI: {str(e)}")
        return "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ AI"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
def reply_to_line(reply_token, message):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}"
    }
    payload = {
        "replyToken": reply_token,
        "messages": [{"type": "text", "text": message}]
    }

    logging.debug(f"üì® Sending payload to LINE: {json.dumps(payload, indent=2)}")
    print(f"üì® Sending to LINE: {json.dumps(payload, indent=2)}")

    response = requests.post(LINE_REPLY_URL, headers=headers, json=payload)

    if response.status_code == 200:
        logging.info("‚úÖ Message sent to LINE successfully!")
        print("‚úÖ Message sent to LINE successfully!")
    else:
        logging.error(f"‚ö†Ô∏è Error sending message: {response.text}")
        print(f"‚ö†Ô∏è Error sending message: {response.text}")

    return response.status_code

# Route ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
@app.route("/", methods=["GET"])
def home():
    return jsonify({"message": "Server is running!"}), 200

# LINE Webhook
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    logging.debug(f"üì• Received request: {json.dumps(data, indent=2)}")

    if "events" not in data or not data["events"]:
        return jsonify({"error": "Invalid request"}), 400

    event = data["events"][0]
    user_message = event.get("message", {}).get("text", "")
    reply_token = event.get("replyToken", "")

    if not user_message or not reply_token:
        logging.warning("‚ö†Ô∏è No message received in webhook event")
        return jsonify({"error": "No message received"}), 400

    ai_reply = chat_with_ai(user_message)

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
    status = reply_to_line(reply_token, ai_reply)

    return jsonify({"status": status, "reply": ai_reply})

if __name__ == "__main__":
    app.run(port=5000)
